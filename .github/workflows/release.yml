name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # v1.0.0, v1.2.3 등의 태그가 푸시될 때 실행

jobs:
  verify:
    name: Verify Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run type check
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: verify
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리를 가져와서 changelog 생성

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Get tag version
        id: tag_version
        run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # 이전 태그와 현재 태그 사이의 커밋 로그를 가져옴
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # 멀티라인 출력을 위한 설정
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release archive
        run: |
          # 빌드된 파일들을 압축
          tar -czf movetum-frontend-${{ steps.tag_version.outputs.TAG_VERSION }}.tar.gz \
            .next/ \
            package.json \
            package-lock.json \
            next.config.ts \
            tailwind.config.js \
            postcss.config.mjs \
            tsconfig.json \
            README.md

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.TAG_VERSION }}
          name: Release ${{ steps.tag_version.outputs.TAG_VERSION }}
          body: |
            ## 🚀 Release ${{ steps.tag_version.outputs.TAG_VERSION }}

            ### Changes
            ${{ steps.changelog.outputs.CHANGELOG }}

            ### 📦 Installation

            ```bash
            # Download and extract the release
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.tag_version.outputs.TAG_VERSION }}/movetum-frontend-${{ steps.tag_version.outputs.TAG_VERSION }}.tar.gz
            tar -xzf movetum-frontend-${{ steps.tag_version.outputs.TAG_VERSION }}.tar.gz
            
            # Install dependencies and start
            npm install
            npm run start
            ```

            ### 🔧 Tech Stack
            - Next.js 15.4.6
            - React 19.1.0
            - TypeScript
            - Tailwind CSS
            - Radix UI

            ### 📄 Documentation
            For more information, see the [README](https://github.com/${{ github.repository }}/blob/${{ steps.tag_version.outputs.TAG_VERSION }}/README.md).
          files: |
            movetum-frontend-${{ steps.tag_version.outputs.TAG_VERSION }}.tar.gz
          draft: false
          prerelease: false

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: verify
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tag version
        id: tag_version
        run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.tag_version.outputs.TAG_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, docker-build]
    if: always()
    
    steps:
      - name: Get tag version
        id: tag_version
        run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Notify success
        if: needs.create-release.result == 'success' && needs.docker-build.result == 'success'
        run: |
          echo "🎉 Release ${{ steps.tag_version.outputs.TAG_VERSION }} created successfully!"
          echo "📦 GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag_version.outputs.TAG_VERSION }}"
          echo "🐳 Docker Image: ghcr.io/${{ github.repository }}:${{ steps.tag_version.outputs.TAG_VERSION }}"

      - name: Notify failure
        if: needs.create-release.result == 'failure' || needs.docker-build.result == 'failure'
        run: |
          echo "❌ Release ${{ steps.tag_version.outputs.TAG_VERSION }} failed!"
          exit 1